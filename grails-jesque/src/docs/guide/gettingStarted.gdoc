How do I use it?
Add the jesque plugin to grails, it will automatically pull in jesque with it's dependencies, and the grails redis plugin.

grails install-plugin jesque
You must also have redis installed in your environment.

Example to enqueue

class BackgroundJob {
    def someOtherService //auto-wiring supported

    def perform( arg1, arg2 ) {
        def domainObject = DomainClass.get(arg1) //GORM supported
        domainObject.message = arg2
        domainObject.save()
    }
}

class SomeOtherClass {
    def jesqueService

    def doWorkAsync() {
        jesqueService.enqueue( 'myQueueName', BackgroundJob.simpleName, 1, 'hi there')
    }
}
Workers can be started manually by calling

    jesqueService.startWorker( 'myQueueName', BackgroundJob.simpleName, BackgroundJob )
or automatically upon start-up with the following config

grails {
    jesque {
        workers {
            someNameForYourWorkerPool {
                workers = 3 //defaults to 1
                queueNames = 'myQueueName' //or a list
                jobTypes = [(BackgroundJob.simpleName):BackgroundJob]
            }
        }
    }
}
The redis pool used is configured in the redis plugin:

grails {
    redis {
        host = localhost //default
        prot = 6379 //default
    }
}
Jobs
Jobs should be placed in grails-app\jobs similar to the Quartz plugin. However, to not clash with quartz, and to retain similarties with resque, the method to execute must be called perform.

You can run the script create-jesque-job to create a shell of a job for you automatically. The following will create a BackgroundJob in the ${grails-app}\jobs folder.

grails create-jesque-job package.Background
class MyJob {
    static queue = 'MyJesqueQueue'
    static workerPool = 'MyWorkerPook'

    def injectedService //auto-wired

    static triggers = {
        cron name: 'MyJob', cronExpression: '0 0 23 * * ? *'
    }

    def perform() {
        log.info "Executing Job"

        injectedService.doSomeWork()
    }
}
Unit and integration tests will also automatically be created. If you have spock installed and listed in your application.properties it will create an integration specification instead of a grails integration test.


